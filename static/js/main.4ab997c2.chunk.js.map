{"version":3,"sources":["components/Card.tsx","components/CardList.tsx","robots.ts","components/SearchBox.tsx","components/Scroll.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Card","id","name","email","className","alt","src","CardList","robots","map","user","i","key","toString","username","SearchBox","onSearchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","React","useState","robotList","setRobotList","search","setSearch","event","target","value","filteredRobots","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qLAqBeA,G,MAZF,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,GAAIC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,MACxB,OACE,yBAAKC,UAAU,uDACb,yBAAKC,IAAI,SAASC,IAAK,wBAA0BL,EAAK,aACtD,6BACE,4BAAKC,GACL,2BAAIC,OCUGI,EAjBE,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,OAClB,OACE,6BACGA,EAAOC,KAAI,SAACC,EAAMC,GACjB,OACE,kBAAC,EAAD,CACEC,IAAKJ,EAAOG,GAAGV,GACfA,GAAIO,EAAOG,GAAGV,GAAGY,WACjBX,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,aCfhBK,EAAqB,CAChC,CACEP,GAAI,EACJC,KAAM,gBACNY,SAAU,OACVX,MAAO,qBAET,CACEF,GAAI,EACJC,KAAM,eACNY,SAAU,YACVX,MAAO,qBAET,CACEF,GAAI,EACJC,KAAM,mBACNY,SAAU,WACVX,MAAO,sBAET,CACEF,GAAI,EACJC,KAAM,mBACNY,SAAU,WACVX,MAAO,6BAET,CACEF,GAAI,EACJC,KAAM,mBACNY,SAAU,SACVX,MAAO,4BAET,CACEF,GAAI,EACJC,KAAM,uBACNY,SAAU,mBACVX,MAAO,2BAET,CACEF,GAAI,EACJC,KAAM,kBACNY,SAAU,eACVX,MAAO,0BAET,CACEF,GAAI,EACJC,KAAM,2BACNY,SAAU,gBACVX,MAAO,wBAET,CACEF,GAAI,EACJC,KAAM,kBACNY,SAAU,WACVX,MAAO,2BAET,CACEF,GAAI,GACJC,KAAM,qBACNY,SAAU,iBACVX,MAAO,2BC1CIY,EAbG,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,eACnB,OACE,yBAAKZ,UAAU,OACb,2BACEa,KAAK,SACLC,YAAY,mBACZd,UAAU,mCACVe,SAAUH,MCGHI,G,MAdA,SAACC,GACd,OACE,yBACEC,MAAO,CACLC,UAAW,SACXC,OAAQ,kBACRC,OAAQ,UAGTJ,EAAMK,YCmBEC,MAvBf,WAAgB,IAAD,EACqBC,IAAMC,SAASrB,GADpC,mBACNsB,EADM,KACKC,EADL,OAEeH,IAAMC,SAAS,IAF9B,mBAENG,EAFM,KAEEC,EAFF,KAYb,OACE,yBAAK7B,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWY,eAXQ,SAACkB,GACtBD,EAAUC,EAAMC,OAAOC,OACvB,IAAMC,EAAiB7B,EAAO8B,QAAO,SAAC9B,GACpC,OAAOA,EAAON,KAAKqC,cAAcC,SAASR,MAE5CD,EAAaM,MAOX,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU7B,OAAQsB,OCZNW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.4ab997c2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {} from \"module\";\r\n\r\nexport interface CardProps {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n}\r\n\r\nconst Card = ({ id, name, email }: CardProps) => {\r\n  return (\r\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <img alt=\"robots\" src={\"https://robohash.org/\" + id + \"?200x200\"} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\nimport { RobotDTO } from \"../robotDTO\";\r\n\r\nexport interface CardListProps {\r\n  robots: RobotDTO[];\r\n}\r\n\r\nconst CardList = ({ robots }: CardListProps) => {\r\n  return (\r\n    <div>\r\n      {robots.map((user, i) => {\r\n        return (\r\n          <Card\r\n            key={robots[i].id}\r\n            id={robots[i].id.toString()}\r\n            name={robots[i].name}\r\n            email={robots[i].email}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import { RobotDTO } from \"./robotDTO\";\n\nexport const robots: RobotDTO[] = [\n  {\n    id: 1,\n    name: \"Leanne Graham\",\n    username: \"Bret\",\n    email: \"Sincere@april.biz\",\n  },\n  {\n    id: 2,\n    name: \"Ervin Howell\",\n    username: \"Antonette\",\n    email: \"Shanna@melissa.tv\",\n  },\n  {\n    id: 3,\n    name: \"Clementine Bauch\",\n    username: \"Samantha\",\n    email: \"Nathan@yesenia.net\",\n  },\n  {\n    id: 4,\n    name: \"Patricia Lebsack\",\n    username: \"Karianne\",\n    email: \"Julianne.OConner@kory.org\",\n  },\n  {\n    id: 5,\n    name: \"Chelsey Dietrich\",\n    username: \"Kamren\",\n    email: \"Lucio_Hettinger@annie.ca\",\n  },\n  {\n    id: 6,\n    name: \"Mrs. Dennis Schulist\",\n    username: \"Leopoldo_Corkery\",\n    email: \"Karley_Dach@jasper.info\",\n  },\n  {\n    id: 7,\n    name: \"Kurtis Weissnat\",\n    username: \"Elwyn.Skiles\",\n    email: \"Telly.Hoeger@billy.biz\",\n  },\n  {\n    id: 8,\n    name: \"Nicholas Runolfsdottir V\",\n    username: \"Maxime_Nienow\",\n    email: \"Sherwood@rosamond.me\",\n  },\n  {\n    id: 9,\n    name: \"Glenna Reichert\",\n    username: \"Delphine\",\n    email: \"Chaim_McDermott@dana.io\",\n  },\n  {\n    id: 10,\n    name: \"Clementina DuBuque\",\n    username: \"Moriah.Stanton\",\n    email: \"Rey.Padberg@karina.biz\",\n  },\n];\n","import React, { ChangeEvent } from \"react\";\r\n\r\nexport interface SearchBoxProps {\r\n  onSearchChange: (event: ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nconst SearchBox = ({ onSearchChange }: SearchBoxProps) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        type=\"search\"\r\n        placeholder=\"Search Robots...\"\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        onChange={onSearchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst Scroll = (props: { children: any }) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflowY: \"scroll\",\r\n        border: \"1px solid black\",\r\n        height: \"800px\",\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { ChangeEvent } from \"react\";\nimport CardList from \"./components/CardList\";\nimport { robots } from \"./robots\";\nimport SearchBox from \"./components/SearchBox\";\nimport \"./styles/App.css\";\nimport Scroll from \"./components/Scroll\";\n\nfunction App() {\n  const [robotList, setRobotList] = React.useState(robots);\n  const [search, setSearch] = React.useState(\"\");\n\n  const onSearchChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setSearch(event.target.value);\n    const filteredRobots = robots.filter((robots) => {\n      return robots.name.toLowerCase().includes(search);\n    });\n    setRobotList(filteredRobots);\n  };\n\n  return (\n    <div className=\"tc\">\n      <h1 className=\"f1\">RoboFriends</h1>\n      <SearchBox onSearchChange={onSearchChange} />\n      <Scroll>\n        <CardList robots={robotList} />\n      </Scroll>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}